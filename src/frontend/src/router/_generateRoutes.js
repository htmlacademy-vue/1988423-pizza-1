/**
 * Плагин для Webpack, генерирует файл routes.js с массивом роутов на основании информации из .vue файлов в каталоге views
 */
const { parse: componentParse } = require("@vue/component-compiler-utils");
const { readFileSync,
  readdirSync,
  writeFileSync,
} = require("fs");
const compiler = require("vue-template-compiler");
const { parse: JSParse } = require("acorn");

const EXTRACT_FIELDS = ["title", "layout", "middlewares"];

/**
 * Вытащить нужные параметры из vue-скрипта
 * @param {string} fileName
 * @returns {object}
 */
const parseFile = (fileName) => {
  let result = { name: fileName.replace(/^Page(.*)\.vue$/, "$1") };
  try {
    const source = readFileSync(`${__dirname}/../views/${fileName}`, "utf8");
    const parsedVue = componentParse({
      source,
      compiler,
      needMap: false,
    });

    const parsed = JSParse(parsedVue.script.content, {
      sourceType: "module",
      ecmaVersion: 2020,
    });

    const exportDefault = parsed.body.find(node => node.type === "ExportDefaultDeclaration");
    exportDefault.declaration.properties.forEach(node => {
      if (EXTRACT_FIELDS.includes(node.key.name)) {
        result[node.key.name] = node.value.type === "ArrayExpression"
          ? node.value.elements.map(arrNode => arrNode.name)
          : node.value.raw;
      }
    });
  } catch (e) {
    console.error(e);
  }
  return result;
};

/**
 * Получить массив всех используемых middlewares
 * @param {array} options
 * @returns {array}
 */
const getUsedMiddlewares = (options) => {
  return [...new Set(
    options
      .map(option => option.middlewares)
      .filter(option => option)
      .reduce((middlewares, result) => result.concat(middlewares), [])
  )];
};

/**
 * Сгенерировать текст скрипта с роутами
 * @param {array} options
 * @returns {string}
 */
const generateScript = (options) => {
  const middlewaresImports = getUsedMiddlewares(options).join(", ")
  return `// This file was autogenerated by _generateRoutes script
import getView from "@/common/helpers/getView";` + (middlewaresImports ? `
import { ${middlewaresImports} } from "@/middlewares";` : "") + `

export default [`
    + options.map(({ name, layout, middlewares, title }) =>
      `  {
    path: "/${name === "Index" ? "" : name.toLowerCase()}",
    name: "${name}",
    component: getView("${name}"),
    meta: {` + (layout ? `
      layout: ${layout},` : "") + (middlewares ? `
      middlewares: [${middlewares.join(", ")}],` : "") + (title ? `
      title: ${title},` : "") + `
    },
  }`
    ).join(",\n") + "];";
};

/**
 * Сгенерировать файл с роутами
 */
const generateRoutesFile = () => {
  let options = [];
  readdirSync(__dirname + "/../views").forEach(file => {
    if (file.startsWith("Page") && file.endsWith(".vue")) {
      options.push(parseFile(file));
    }
  });
  writeFileSync(`${__dirname}/routes.js`, generateScript(options));
};

module.exports = class GenerateRoutesPlugin {
  apply(compiler) {
    compiler.hooks.compile.tap({ name: "GenerateRoutes" }, generateRoutesFile);
  }
}
